openapi: 3.0.0
info:
  title: Restaurant API
  description: API for managing restaurants, customers, and management operations on the MTOGO platform. Made by Andreas and Owais.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local server
tags:
  - name: Restaurants
    description: Endpoints for restaurant-related operations
paths:
  /api/auth/register/restaurant:
    post:
      tags:
        - Restaurants
      summary: Register a new restaurant
      description: Create a new restaurant account by providing the necessary details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: First Pizza Restaurant
                phone:
                  type: string
                  example: '+4512345678'
                email:
                  type: string
                  format: email
                  example: arf@gmail.com
                password:
                  type: string
                  format: password
                  example: Abcd1234!
                address:
                  type: object
                  properties:
                    street:
                      type: string
                      example: Apple Blvd 2
                    city:
                      type: string
                      example: New York
                    zip:
                      type: string
                      example: 4000
                regNo:
                  type: string
                  example: '1234'
                accountNo:
                  type: string
                  example: '12345678'
      responses:
        '201':
          description: Restaurant registered successfully
        '400':
          description: Invalid input or "No coordinates found for the given address. Please provide a valid address."
        '500':
          description: Internal Server Error
  /api/auth/login/restaurant:
    post:
      tags:
        - Restaurants
      summary: Restaurant login
      description: Logs in a restaurant and sets a session cookie.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: arf@gmail.com
                password:
                  type: string
                  format: password
                  example: Abcd1234!
      responses:
        '200':
          description: Login successful. A session cookie is set.
          headers:
            Set-Cookie:
              description: Contains the session cookie.
              schema:
                type: string
                example: session=abc123; Path=/; HttpOnly
        '401':
          description: Invalid credentials
        '500':
          description: Server error

  /api/restaurants/categories:
    post:
      tags:
        - Restaurants
      summary: Create a new category
      description: Allows a restaurant to create a new category. Authorization is required.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Pizzas
                  description: The title of the category to be created.
      responses:
        '201':
          description: Category created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category created successfully
                  category:
                    type: object
                    properties:
                      id:
                        type: string
                        example: cm4a1ufrx000113rx8gfp6qo4
                      title:
                        type: string
                        example: Burgers
                      sortOrder:
                        type: integer
                        example: 1
                      description:
                        type: string
                        example: ''
                      createdAt:
                        type: string
                        format: date-time
                        example: '2024-12-04T15:35:00.957Z'
        '401':
          description: Unauthorized. The user does not have permission to perform this action.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized to perform this action.
        '409':
          description: Conflict. A category with the same title already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: A category with this title already exists.
        '500':
          description: Internal server error.

  /api/restaurants/categories/{categoryId}/menus:
    post:
      tags:
        - Restaurants
      summary: Create a new menu
      description: Allows a restaurant to create a new menu item under a specific category.
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The ID of the category under which the menu is being created.
          schema:
            type: string
            example: cm49qipfo00001zrzg0vwfrlv
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Vegetarian
                  description: The title of the menu item.
                description:
                  type: string
                  example: Cheese, Tomatoes etc..
                  description: Details about the menu item.
                price:
                  type: number
                  format: float
                  example: 129
                  description: The price of the menu item.
      responses:
        '201':
          description: Menu created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Menu created successfully
                  menu:
                    type: object
                    properties:
                      id:
                        type: string
                        example: cm4a22z95000413rx340k2js4
                      title:
                        type: string
                        example: Vegetarian
                      description:
                        type: string
                        example: Cheese, Tomatoes etc..
                      price:
                        type: number
                        format: float
                        example: 129
                      createdAt:
                        type: string
                        format: date-time
                        example: '2024-12-04T15:41:39.450Z'
        '409':
          description: Conflict. A menu with the same title already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: A menu with this title already exists.
        '500':
          description: Internal server error.

  /api/restaurants/{restaurantId}/categories:
    get:
      tags:
        - Restaurants
      summary: Get categories and menus by restaurant ID
      description: Retrieves all categories and their associated menus for a specific restaurant.
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: The ID of the restaurant to retrieve categories and menus for.
          schema:
            type: string
            example: cm4a1qz0x0000144irtkvruwm
      responses:
        '200':
          description: A list of categories and their menus.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: cm4a1ufrx000113rx8gfp6qo4
                    title:
                      type: string
                      example: Pizzas
                    menus:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            example: cm4a22z95000413rx340k2js4
                          title:
                            type: string
                            example: Vegetarian
                          description:
                            type: string
                            example: Cheese, Tomatoes etc..
                          price:
                            type: number
                            format: float
                            example: 129
                          createdAt:
                            type: string
                            format: date-time
                            example: '2024-12-04T15:41:39.450Z'
        '404':
          description: Restaurant not found or has no categories.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Restaurant not found or no categories available.
        '500':
          description: Internal server error.

    /api/restaurants/categories/{categoryId}:
    put:
      tags:
        - Restaurants
      summary: Update a category by ID
      description: Allows a restaurant to update the details of a specific category by its ID.
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The ID of the category to update.
          schema:
            type: string
            example: cm3ppktcq0000q2of4xesxez5
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Pizza
                  description: The updated title of the category.
                sortOrder:
                  type: integer
                  example: 2
                  description: The updated sort order of the category.
      responses:
        '200':
          description: Category updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category updated successfully
                  category:
                    type: object
                    properties:
                      id:
                        type: string
                        example: cm3ppktcq0000q2of4xesxez5
                      title:
                        type: string
                        example: Pizza
                      sortOrder:
                        type: integer
                        example: 2
                      createdAt:
                        type: string
                        format: date-time
                        example: '2024-12-04T15:41:39.450Z'
                      updatedAt:
                        type: string
                        format: date-time
                        example: '2024-12-05T10:00:00.000Z'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input data.
        '404':
          description: Category not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category not found.
        '500':
          description: Internal server error.

  /api/restaurants/categories/{categoryId}:
    delete:
      tags:
        - Restaurants
      summary: Delete a category by ID
      description: Allows a restaurant to delete a specific category by its ID.
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The ID of the category to delete.
          schema:
            type: string
            example: cm3ppktcq0000q2of4xesxez5
      responses:
        '200':
          description: Category deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category deleted successfully
        '404':
          description: Category not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category not found.
        '500':
          description: Internal server error.

  /api/restaurant/categories/{restaurantId}:
    get:
      tags:
        - Restaurants
      summary: Get categories by restaurant ID
      description: Retrieves all categories associated with a specific restaurant ID.
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: The ID of the restaurant to retrieve categories for.
          schema:
            type: string
            example: cm3lfig8f0002oqa5omw3mw84
      responses:
        '200':
          description: A list of categories for the specified restaurant.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: cm4a1ufrx000113rx8gfp6qo4
                    title:
                      type: string
                      example: Pizzas
                    sortOrder:
                      type: integer
                      example: 1
                    description:
                      type: string
                      example: ''
                    createdAt:
                      type: string
                      format: date-time
                      example: '2024-12-04T15:41:39.450Z'
        '404':
          description: Restaurant not found or no categories available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Restaurant not found or no categories available.
        '500':
          description: Internal server error.

  /api/restaurant/categories/{categoryId}/menus:
    get:
      tags:
        - Restaurants
      summary: Get menus by category ID
      description: Retrieves all menus associated with a specific category ID.
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The ID of the category to retrieve menus for.
          schema:
            type: string
            example: cm3lkhtex00021ffe0rmy4myg
      responses:
        '200':
          description: A list of menus for the specified category.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: cm4a22z95000413rx340k2js4
                    title:
                      type: string
                      example: Vegetarian
                    description:
                      type: string
                      example: Cheese, Tomatoes etc..
                    price:
                      type: number
                      format: float
                      example: 129
                    createdAt:
                      type: string
                      format: date-time
                      example: '2024-12-04T15:41:39.450Z'
        '404':
          description: Category not found or no menus available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category not found or no menus available.
        '500':
          description: Internal server error.

  /api/restaurants/menus/{menuId}:
    put:
      tags:
        - Restaurants
      summary: Update a menu by menu ID
      description: Allows a restaurant to update the details of a specific menu by its ID.
      parameters:
        - name: menuId
          in: path
          required: true
          description: The ID of the menu to update.
          schema:
            type: string
            example: cm3mtqlck000012i4gtvpqvwn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Vegetarian
                  description: The updated title of the menu (optional).
                description:
                  type: string
                  example: Cheese, Tomatoes etc..
                  description: The updated description of the menu (optional).
                price:
                  type: number
                  format: float
                  example: 130
                  description: The updated price of the menu (optional).
      responses:
        '200':
          description: Menu updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Menu updated successfully
                  menu:
                    type: object
                    properties:
                      id:
                        type: string
                        example: cm3mtqlck000012i4gtvpqvwn
                      title:
                        type: string
                        example: Vegetarian
                      description:
                        type: string
                        example: Cheese, Tomatoes etc..
                      price:
                        type: number
                        format: float
                        example: 130
                      createdAt:
                        type: string
                        format: date-time
                        example: '2024-12-04T15:41:39.450Z'
                      updatedAt:
                        type: string
                        format: date-time
                        example: '2024-12-05T12:00:00.000Z'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input data.
        '404':
          description: Menu not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Menu not found.
        '500':
          description: Internal server error.
    delete:
      tags:
        - Restaurants
      summary: Delete a menu by menu ID
      description: Allows a restaurant to delete a specific menu by its ID.
      parameters:
        - name: menuId
          in: path
          required: true
          description: The ID of the menu to delete.
          schema:
            type: string
            example: cm3mtqlck000012i4gtvpqvwn
      responses:
        '200':
          description: Menu deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Menu deleted successfully
        '404':
          description: Menu not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Menu not found.
        '500':
          description: Internal server error.

  /api/restaurants/{restaurantId}:
    get:
      tags:
        - Restaurants
      summary: Get details of a specific restaurant by its ID
      description: Retrieves detailed information about a specific restaurant using its unique ID.
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: The ID of the restaurant to retrieve.
          schema:
            type: string
            example: cm3lfig8f0002oqa5omw3mw84
      responses:
        '200':
          description: Restaurant details retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: cm3lfig8f0002oqa5omw3mw84
                  name:
                    type: string
                    example: 'First Pizza Restaurant'
                  phone:
                    type: string
                    example: '+4512345678'
                  email:
                    type: string
                    example: 'arf@gmail.com'
                  address:
                    type: object
                    properties:
                      street:
                        type: string
                        example: 'Apple Blvd 2'
                      city:
                        type: string
                        example: 'New York'
                      zip:
                        type: string
                        example: '4000'
                  regNo:
                    type: string
                    example: '1234'
                  accountNo:
                    type: string
                    example: '12345678'
                  createdAt:
                    type: string
                    format: date-time
                    example: '2024-12-04T15:35:00.957Z'
                  updatedAt:
                    type: string
                    format: date-time
                    example: '2024-12-05T12:00:00.000Z'
        '404':
          description: Restaurant not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Restaurant not found.'
        '500':
          description: Internal server error.

  /api/auth/logout:
    post:
      tags:
        - Restaurants
        - Customers
        - Management
      summary: Logout a user
      description: Logs out a user by clearing the session or authentication token.
      responses:
        '200':
          description: User logged out successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Logout successful.'
        '401':
          description: Unauthorized request. User not logged in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. No active session found.'
        '500':
          description: Internal server error.

  /login/management:
    post:
      tags:
        - Management
      summary: Management login
      description: Authenticates a management user and establishes a session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "admin@company.com"
                  description: "The email address of the management user."
                password:
                  type: string
                  example: "SecurePassword123!"
                  description: "The password for the management user."
      responses:
        '200':
          description: Login successful. Session established.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful!"
                  session:
                    type: string
                    example: "sessionToken123456"
                    description: "Session token returned upon successful login."
        '401':
          description: Unauthorized. Invalid credentials or missing fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid credentials"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error. Please try again later."

  # CUSTOMERS
  /api/auth/register/customer:
    post:
      tags:
        - Customers
      summary: Register a new customer
      description: Allows a new customer to register by providing necessary information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: Andreas
                  description: The first name of the customer.
                lastName:
                  type: string
                  example: Fritzbøger
                  description: The last name of the customer.
                phone:
                  type: string
                  example: '60504030'
                  description: The phone number of the customer.
                email:
                  type: string
                  format: email
                  example: 'arf@gmail.com'
                  description: The email address of the customer.
                password:
                  type: string
                  format: password
                  example: 'Abcd1234!'
                  description: The password for the customer account.
      responses:
        '200':
          description: Customer registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Customer registered successfully'
                  customer:
                    type: object
                    properties:
                      id:
                        type: string
                        example: cm4a37fzt000069m9d4otmcre
                      firstName:
                        type: string
                        example: Owais
                      lastName:
                        type: string
                        example: Dashti
                      email:
                        type: string
                        example: owais@gmail.com
                      phone:
                        type: string
                        example: '60504030'
                      createdAt:
                        type: string
                        format: date-time
                        example: '2024-12-04T16:13:07.370Z'
        '400':
          description: Invalid input data or missing required fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'A customer with this email already exists'
        '409':
          description: Conflict error due to existing customer.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'A customer with this email already exists'
        '500':
          description: Internal server error.

  /api/auth/login/customer:
    post:
      tags:
        - Customers
      summary: Login a customer
      description: Authenticates a customer and returns a session cookie upon successful login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'owais@gmail.com'
                  description: The email address of the customer.
                password:
                  type: string
                  format: password
                  example: 'Abcd1234!'
                  description: The password for the customer account.
      responses:
        '200':
          description: Login successful, session cookie returned.
          headers:
            Set-Cookie:
              description: Session cookie set for authenticated session.
              schema:
                type: string
                example: 'session=your-session-id; Path=/; HttpOnly; SameSite=Strict'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Login successful!'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid credentials'
        '500':
          description: Internal server error.

  /api/basket:
    get:
      tags:
        - Customers
      summary: Get the customer's basket
      description: Retrieves the contents of a customer's basket for a specific restaurant.
      parameters:
        - name: restaurantId
          in: query
          required: true
          description: The ID of the restaurant for which to retrieve the basket.
          schema:
            type: string
            example: cm49qi0zr00006122j1hml4gm
      responses:
        '200':
          description: Basket retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  basket:
                    type: array
                    items:
                      type: object
                      properties:
                        itemId:
                          type: string
                          example: 'item12345'
                        name:
                          type: string
                          example: 'Pizza Margherita'
                        quantity:
                          type: integer
                          example: 2
                        price:
                          type: number
                          format: float
                          example: 12.99
        '404':
          description: Basket not found for the given customer and restaurant.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Basket not found for the given customer and restaurant.'
        '401':
          description: Unauthorized request. Session cookie required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Session cookie required.'
        '500':
          description: Internal server error.

    post:
      tags:
        - Customers
      summary: Add an item to the customer's basket
      description: Allows a customer to add a menu item to their basket for a specific restaurant.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                menuId:
                  type: string
                  example: cm49qjxir00041zrz5hbephtu
                  description: The ID of the menu item to add to the basket.
                title:
                  type: string
                  example: Vegetarian
                  description: The title/name of the menu item.
                quantity:
                  type: integer
                  example: 2
                  description: The number of items to add to the basket.
                restaurantId:
                  type: string
                  example: cm49qi0zr00006122j1hml4gm
                  description: The ID of the restaurant associated with the basket.
      responses:
        '200':
          description: Item added successfully to the basket.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Item added to the basket successfully.'
                  basket:
                    type: array
                    items:
                      type: object
                      properties:
                        itemId:
                          type: string
                          example: 'item12345'
                        name:
                          type: string
                          example: 'Pizza Margherita'
                        quantity:
                          type: integer
                          example: 2
                        price:
                          type: number
                          format: float
                          example: 12.99
        '400':
          description: Invalid input data or missing fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid input data. Please provide all required fields.'
        '404':
          description: Restaurant or menu not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Restaurant or menu not found.'
        '401':
          description: Unauthorized request. Session cookie required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Session cookie required.'
        '500':
          description: Internal server error.

    put:
      tags:
        - Customers
      summary: Update an item in the customer's basket
      description: Allows a customer to update the quantity of a menu item in their basket for a specific restaurant.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemId:
                  type: string
                  example: cm3vqlg1t0006j48as8novj65
                  description: The ID of the item in the basket to update.
                quantity:
                  type: integer
                  example: 0
                  description: The updated quantity of the item in the basket. A value of 0 may indicate removal from the basket.
                restaurantId:
                  type: string
                  example: cm3vqicwm000134choat5sho7
                  description: The ID of the restaurant associated with the basket.
      responses:
        '200':
          description: Item updated successfully in the basket.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Item updated successfully in the basket.'
                  basket:
                    type: array
                    items:
                      type: object
                      properties:
                        itemId:
                          type: string
                          example: 'item12345'
                        name:
                          type: string
                          example: 'Pizza Margherita'
                        quantity:
                          type: integer
                          example: 2
                        price:
                          type: number
                          format: float
                          example: 12.99
        '400':
          description: Invalid input data or missing fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid input data. Please provide all required fields.'
        '404':
          description: Item or restaurant not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Item or restaurant not found.'
        '401':
          description: Unauthorized request. Session cookie required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Session cookie required.'
        '500':
          description: Internal server error.

    delete:
      tags:
        - Customers
      summary: Clear the customer's basket
      description: Allows a customer to remove all items from their basket for a specific restaurant.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurantId:
                  type: string
                  example: cm3vqicwm000134choat5sho7
                  description: The ID of the restaurant associated with the basket.
      responses:
        '200':
          description: Basket cleared successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Basket cleared successfully.'
        '404':
          description: Restaurant not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Restaurant not found.'
        '401':
          description: Unauthorized request. Session cookie required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Session cookie required.'
        '500':
          description: Internal server error.

  /api/orders:
    post:
      tags:
        - Customers
      summary: Create an order
      description: Allows a customer to create an order using an existing basket and specify delivery and payment details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                basketId:
                  type: string
                  example: cm4a3xyjb000813rxpakc76yk
                  description: The ID of the basket to use for the order.
                deliveryAddress:
                  type: object
                  properties:
                    recipentName:
                      type: string
                      example: Andreas Fritzbøger
                      description: The name of the person receiving the delivery.
                    street:
                      type: string
                      example: Apple Blvardi
                      description: The street address for delivery.
                    city:
                      type: string
                      example: New Yorky
                      description: The city for the delivery address.
                    zip:
                      type: string
                      example: '2380'
                      description: The postal code for the delivery address.
                    floor:
                      type: string
                      example: 5th
                      description: The floor or additional details for the delivery address.
                payment:
                  type: object
                  properties:
                    method:
                      type: string
                      enum:
                        - VISA
                        - MASTER_CARD
                      example: VISA
                      description: The payment method for the order.
      responses:
        '200':
          description: Order created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order created successfully
                  order:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 87d06907-29b2-465e-bd65-78b08a0a0333
                      customerId:
                        type: string
                        example: cm49qj3gh00026122dz8kefie
                      restaurantId:
                        type: string
                        example: cm49qi0zr00006122j1hml4gm
                      status:
                        type: string
                        example: YOUR_FOOD_IS_BEING_PREPARED
                      totalAmount:
                        type: number
                        format: float
                        example: 258
                      paymentIntentId:
                        type: string
                        example: pi_3QSLWrDAx3Y1tFqk1lQrGtnP
                      note:
                        type: string
                        example: null
                      createdAt:
                        type: string
                        format: date-time
                        example: '2024-12-04T16:34:22.447Z'
                      updatedAt:
                        type: string
                        format: date-time
                        example: '2024-12-04T16:34:22.447Z'
                      deliveryAddressesId:
                        type: string
                        example: 8e86cf43-d54b-482b-a1b2-dd94702de314
        '400':
          description: Invalid input data or missing fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input data. Please provide all required fields.
        '404':
          description: Basket not found or invalid restaurant or payment method.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Basket not found or invalid restaurant/payment method.
        '401':
          description: Unauthorized request. Session cookie required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized. Session cookie required.
        '500':
          description: Internal server error.

  /api/search/zipcode/{zipCode}:
    get:
      tags:
        - Search
      summary: Get restaurants by zip code
      description: Retrieves a list of restaurants located within a specific zip code.
      parameters:
        - name: zipCode
          in: path
          required: true
          description: The zip code for which to search for restaurants.
          schema:
            type: string
            example: '4000'
      responses:
        '200':
          description: List of restaurants retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: cm4a3xyjb000813rxpakc76yk
                    name:
                      type: string
                      example: 'Restaurant Name'
                    address:
                      type: object
                      properties:
                        street:
                          type: string
                          example: '123 Main Street'
                        city:
                          type: string
                          example: 'City Name'
                        zip:
                          type: string
                          example: '4000'
                    phone:
                      type: string
                      example: '123-456-7890'
                    cuisineType:
                      type: string
                      example: 'Italian'
                    createdAt:
                      type: string
                      format: date-time
                      example: '2024-12-04T16:45:30.123Z'
        '404':
          description: No restaurants found for the given zip code.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'No restaurants found for the given zip code.'
        '500':
          description: Internal server error.
